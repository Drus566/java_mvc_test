https://habr.com/ru/articles/137347/
https://objectcomputing.com/resources/publications/sett/may-2009-miglayout-the-one-java-layout-manager-that-does-it-all
https://docs.oracle.com/javase/8/docs/api/javax/swing/JLayer.html
https://youtu.be/W3wkSboz9CA
https://youtu.be/bfn56kAsq4I
http://weblookandfeel.com

DB
http://orientdb.com/docs/3.2.x/indexing/FullTextIndex.html
http://orientdb.com/docs/3.2.x/indexing/Full-Text-Index.html

            FULLTEXT ENGINE LUCENE METADATA {
                "default": "org.apache.lucene.analysis.standard.StandardAnalyzer",
                "index": "org.apache.lucene.analysis.core.KeywordAnalyzer",
                "query": "org.apache.lucene.analysis.standard.StandardAnalyzer",
                "name_index": "org.apache.lucene.analysis.standard.StandardAnalyzer",
                "name_query": "org.apache.lucene.analysis.core.KeywordAnalyzer",
                "lyrics_index": "org.apache.lucene.analysis.en.EnglishAnalyzer",
                "title_index": "org.apache.lucene.analysis.en.EnglishAnalyzer",
                "title_query": "org.apache.lucene.analysis.en.EnglishAnalyzer",
                "author_query": "org.apache.lucene.analysis.core.KeywordAnalyzer",
                "description_index": "org.apache.lucene.analysis.standard.StandardAnalyzer",
                "description_index_stopwords": [
                  "the",
                  "is"
                ]
            }

1. принадлежность к группе (1-7 групп)
2. иерархия внутри группы (1-??)
3.  перфорация для крепления в шкафу(20/25 мм в зав-ти от типа каркаса)
4. мах размеры объекта (ШГВ)
5. наличие отверстий (да/нет)
6. материал (металл, оц, медь, Al, поликарбонат, стэф, ткмщ)
7. сортамент (лист, круг, шестирганник, полоса,…)
8. толщина (0-20...), диам, р-р шестигр.
9. простые / сложные=количество гибов больше 3.
10. картинка

на выходе список децимальных номеров 3d или чертежей.

PropertyChangeSupport в Swing - это служебный класс, который обеспечивает механизм уведомления об изменениях свойств объекта.
Основные характеристики
Позволяет регистрировать и удалять слушателей изменений свойств
Используется для реализации паттерна Observer в JavaBeans
Входит в пакет java.beans
Ключевые методы
addPropertyChangeListener(): Добавление слушателя изменений
removePropertyChangeListener(): Удаление слушателя
firePropertyChange(): Уведомление слушателей о изменении свойства
Пример использования
java
public class MyBean {
    private PropertyChangeSupport propertySupport;
    private String sampleProperty;

    public MyBean() {
        propertySupport = new PropertyChangeSupport(this);
    }

    public void setSampleProperty(String value) {
        String oldValue = sampleProperty;
        sampleProperty = value;
        propertySupport.firePropertyChange("sampleProperty", oldValue, sampleProperty);
    }
}
Важность
Позволяет создавать гибкие компоненты с возможностью отслеживания изменений
Обеспечивает слабую связанность между компонентами


https://stackoverflow.com/questions/5217611/the-mvc-pattern-and-swing

https://www.youtube.com/watch?v=icf5S9fzRXE

https://www.youtube.com/watch?v=aGOWweeAfcw - jdbc


public enum ComponentType {
    VIEW(1, "UserView"),
    MODEL(2, "DataModel"),
    CONTROLLER(3, "MainController");

    private final int id;
    private final String name;

    ComponentType(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }
}
Singleton-подход с инициализацией
java
public enum ComponentRegistry {
    INSTANCE;

    private Map<ComponentType, Object> components = new HashMap<>();

    public void register(ComponentType type, Object component) {
        components.put(type, component);
    }

    public <T> T getComponent(ComponentType type) {
        return (T) components.get(type);
    }
}
Преимущества подхода
Уникальная идентификация компонентов
Возможность регистрации и получения компонентов
Типобезопасность
Centralized management
Пример использования
java
public class Application {
    public static void main(String[] args) {
        // Регистрация компонентов
        ComponentRegistry.INSTANCE.register(
            ComponentType.VIEW,
            new UserView()
        );

        ComponentRegistry.INSTANCE.register(
            ComponentType.MODEL,
            new UserModel()
        );

        // Получение компонентов
        UserView view = ComponentRegistry.INSTANCE
            .getComponent(ComponentType.VIEW);

        UserModel model = ComponentRegistry.INSTANCE
            .getComponent(ComponentType.MODEL);
    }
}
Дополнительные возможности
Поддержка lazy-инициализации
Автоматическая регистрация компонентов
Безопасный доступ к компонентам
Ключевая особенность: Enum позволяет создать потокобезопасный, простой и расширяемый механизм управления компонентами.


---------------------
* Алгоритм двойного клика
 1. Попробовать открыть pdf;
 2. Открыть папку;
 3. Открыть окно управления

* Убрать возможность добавления параметра с если параметр с таким именем уже существует
* Добавить псевдоним для наименования параметра (для удобства поиска)
(ВЫПОЛНЕНО) * Перечисления не нужны
(ВЫПОЛНЕНО) * Диапазоны не нужны
* Делать поиск по ключевым словам в строке например "[длина=32(3),ширина=5,материал=металл]", в скобках допуск.
* Возможно в будущем сделать панель для поиска (для не опытных пользователей)
* Первые 5 вариантов быстрого поиска убрать (показалось бесполезным и не нужным)
(ВЫПОЛНЕНО) * Сохранять к папке детали SVN путь между перезапусками программы
* Сохранять уже введенные запросы
* Правой кнопкой мыши по таблице открыть окно управления
(ВЫПОЛНЕНО) * Добавить тред пул




